[project]
name = "{{cookiecutter.package_name}}"
authors = [{name = "{{cookiecutter.full_name}}", email= "{{cookiecutter.email}}"}]
description = "{{cookiecutter.short_description}}"
readme = "README.md"
requires-python = ">=3.11.0"
dynamic = ["version"]

dependencies = []

{% if cookiecutter.license == "MIT" -%}
license = {text = "{{cookiecutter.license}}"}
{%- elif cookiecutter.license == "BSD-3" -%}
license = {text = "BSD-3-Clause"}
{%- elif cookiecutter.license == "GNU GPL v3.0" -%}
license = {text = "GPL-3.0-only"}
{%- elif cookiecutter.license == "GNU LGPL v3.0" -%}
license = {text = "LGPL-3.0-only"}
{%- elif cookiecutter.license == "Apache Software License 2.0" -%}
license = {text = "Apache-2.0"}
{%- elif cookiecutter.license == "Mozilla Public License 2.0" -%}
license = {text = "MPL-2.0"}
{%- endif %}

classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    {% if cookiecutter.license == "MIT" -%}
    "License :: OSI Approved :: MIT License",
    {%- elif cookiecutter.license == "BSD-3" -%}
    "License :: OSI Approved :: BSD License",
    {%- elif cookiecutter.license == "GNU GPL v3.0" -%}
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    {%- elif cookiecutter.license == "GNU LGPL v3.0" -%}
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    {%- elif cookiecutter.license == "Apache Software License 2.0" -%}
    "License :: OSI Approved :: Apache Software License",
    {%- elif cookiecutter.license == "Mozilla Public License 2.0" -%}
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    {%- endif %}
]

{% if cookiecutter.github_repository_url != 'provide later' -%}
[project.urls]
"Homepage" = "{{ cookiecutter.github_repository_url }}"
"Bug Tracker" = "https://github.com/{{cookiecutter.github_username_or_organization}}/{{cookiecutter.package_name}}/issues"
{% if cookiecutter.create_docs == "yes" -%}
"Documentation" = "https://{{cookiecutter.github_username_or_organization}}.github.io/{{cookiecutter.package_name}}"
{% elif cookiecutter.create_docs == "no" -%}
"Documentation" = "https://github.com/{{cookiecutter.github_username_or_organization}}/{{cookiecutter.package_name}}"
{%- endif %}
"Source Code" = "https://github.com/{{cookiecutter.github_username_or_organization}}/{{cookiecutter.package_name}}"
"User Support" = "https://github.com/{{cookiecutter.github_username_or_organization}}/{{cookiecutter.package_name}}/issues"
{%- endif %}

[project.optional-dependencies]
dev = [
  "pytest",
  "pytest-cov",
  "coverage",
  "tox",
  "mypy",
  "pre-commit",
  "ruff",
  "setuptools_scm",
]

[build-system]
requires = [
    "setuptools>=45",
    "wheel",
    "setuptools_scm[toml]>=6.2",
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["{{cookiecutter.module_name}}*"]
{% if cookiecutter.create_docs == "yes" -%}
exclude = ["tests", "docs*"]
{% elif cookiecutter.create_docs == "no" -%}
exclude = ["tests*"]
{%- endif %}

[tool.pytest.ini_options]
addopts = "--cov={{cookiecutter.module_name}}"
filterwarnings = [
    "error",
]

[tool.setuptools_scm]

[tool.check-manifest]
{% if cookiecutter.create_docs == "yes" -%}
ignore = [
  ".yaml",
  "tox.ini",
  "tests/",
  "tests/test_unit/",
  "tests/test_integration/",
  "docs/",
  "docs/source/",
]
{% elif cookiecutter.create_docs == "no" -%}
ignore = [
  ".yaml",
  "tox.ini",
  "tests/",
  "tests/test_unit/",
  "tests/test_integration/",
]
{%- endif %}

[tool.ruff]
line-length = 79
exclude = ["__init__.py", "build", ".eggs"]
lint.select = [
  "E",   # pycodestyle errors
  "F",   # Pyflakes
  "I",   # isort
  # You can see what all the rules do here: https://docs.astral.sh/ruff/rules/
  # Some additional ruff rules that might be useful (uncomment to enable)
  #"UP",  # pyupgrade
  #"B",   # flake8 bugbear
  #"SIM", # flake8 simplify
  #"C90", # McCabe complexity
]
fix = true

[tool.ruff.format]
docstring-code-format = true # Also format code in docstrings (e.g. examples)

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py{311,312,313}
isolated_build = True

[gh-actions]
python =
    3.11: py311
    3.12: py312
    3.13: py313

[testenv]
extras =
    dev
commands =
    pytest -v --color=yes --cov={{cookiecutter.module_name}} --cov-report=xml
"""


[tool.codespell]
skip = '.git'
check-hidden = true
